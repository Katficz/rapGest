extends layout
block content

  div.col-md-3#external-events
    h3 Lista Planów
    #external-events-list
      each masterplan in masterplans
        h4 #{masterplan.name}
          button.btn.btn-secondary.btn-sm.float-right(type='button' data-toggle='modal' data-target=('#ID'+masterplan._id))
            | Dodaj Plan Dzienny
          // Modal
          p.mt-4
          .modal.fade(id=('ID'+masterplan._id) tabindex='-1' role='dialog' aria-labelledby='exampleModalLongTitle' aria-hidden='true')
            .modal-dialog.modal-lg(role='document')
              .modal-content
                .modal-header
                  h5#exampleModalLongTitle.modal-title #{masterplan.name} - Plan Dzienny
                  button.close(type='button' data-dismiss='modal' aria-label='Close')
                    span(aria-hidden='true') &times;
                .modal-body(title=masterplan._id)
                  .container-fluid
                    .row
                      .col(class='this_is_unnecessary_class')
                        div(class='row')
                          div.col
                            label Nazwa planu dziennego   
                            input.form-control.planName(type='text' required)
                        div.mt-4(class='row')
                          div.col
                            | Opis
                            textarea.form-control.planDescription(rows='2' type='text')
                        div(class='row')
                          div.col.mt-4
                            label Numer zlecenia
                            input.form-control.planOrderNumber(type='text')
                        div(class='row')
                          div.col
                            label Linia
                            select.planLine.form-control(type='select' name='line' )
                              option(value='defaultvalue' selected) Dowolne
                              each line in lines
                                if plan
                                  option(value=line._id) #{line.name}
                          div.col
                            label Operacja
                            select.planOperation.form-control(type='select' name='operation' )
                              option(value='defaultvalue' selected) Dowolne
                              each operation in operations
                                  option(value=operation._id) #{operation.name}
                        div.mt-4(class='row')
                          div.col
                            label Typ Urządzenia
                            select.planDevicetype.form-control(type='select' name='devicetype' )
                              option(value='defaultvalue' selected) Dowolne
                              each devicetype in devicetypes
                                  option(value=devicetype._id) #{devicetype.name}
                          div.col
                            label Urządzenie
                            select.planDevice.form-control(type='select' name='device' )
                              option(value='defaultvalue' selected) Dowolne
                              each device in devices
                                  option(value=device._id) #{device.name}
                        div.mt-4(class='row')
                          div.col
                            div.form-check
                              input.planIsParalyzing(class="form-check-input" type="checkbox" value=1)
                              label Konieczne zatrzymanie linii.
                .modal-footer
                  button.btn.btn-secondary(type='button' data-dismiss='modal') Zamknij
                  button.btn.btn-primary(type='button' id='ABB' onclick='addSubPlan(this)') Dodaj

    div
      button.btn.btn-danger.mt-3(type="button" id='testSendButton' onclick="")  Zapisz 
      button.btn.btn-info.mt-3.ml-4(type="button" id='printList' onclick="")  Wydrukuj Plan Dnia
  div.col#calendar-wrap
    #calendar



  link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/fullcalendar@5.6.0/main.min.css')
  script(src='https://cdn.jsdelivr.net/npm/fullcalendar@5.6.0/main.min.js')
  script(src='https://cdn.jsdelivr.net/npm/fullcalendar@5.6.0/locales-all.min.js')
  script.
    const allDevices =  !{JSON.stringify(devices)}
    const allMasterplans = !{JSON.stringify(masterplans)}

    for (masterplan of allMasterplans){
      masterplanID = 'ID' + masterplan._id
      
      masterplanForm = document.getElementById(masterplanID)
      masterplanForm.querySelector('.planLine').addEventListener('change', updateDevices)
      masterplanForm.querySelector('.planOperation').addEventListener('change', updateDevices)
      masterplanForm.querySelector('.planDevicetype').addEventListener('change', updateDevices)
    }
    function updateDevices(){
      let parent = this.parentNode.parentNode.parentNode
          let line = parent.querySelector('.planLine').value
          let operation = parent.querySelector('.planOperation').value
          let devicetype = parent.querySelector('.planDevicetype').value
          let devices = []
          for (device of allDevices){
            if((line==='defaultvalue' ? true : device.prodLine.toString() === line) &&
               (operation==='defaultvalue' ? true : device.operation.toString() === operation) &&
               (devicetype==='defaultvalue' ? true : device.deviceType.toString() === devicetype)){
               devices.push(device)
            }
         }
         removeOptions(parent.querySelector('.planDevice'))
         renderDevices(devices, parent)
    }
    function renderDevices(devices, parent){
         let devicesHTML = `<option value='defaultvalue' selected=true> Dowolne Urządzenie </option>`
         for(device of devices) {
            devicesHTML = devicesHTML + '<option value='+ device._id +'>' + device.name + '</option>';
         }
         let whereToPaste = parent.querySelector('.planDevice')
         whereToPaste.insertAdjacentHTML('beforeend', devicesHTML)
      }
      function removeOptions(selectElement) {
         var i, L = selectElement.options.length - 1;
         for(i = L; i >= 0; i--) {
            selectElement.remove(i);
         }
      }
  script.
    // PLAN: ['_id', 'name', 'dateStart', 'dateEnd', 'status']
    let events_list = !{JSON.stringify(events_list)}
    // this set holds ID's of all modified events
    let modifiedEvents = new Set
    // Array that holds created plan objects' additional info that doesn't fit into Calendar
    let createdPlans = []

    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
      },
      navLinks: true, // can click day/week names to navigate views
      nowIndicator: true,
      weekNumbers: true,
      weekNumberCalculation: 'ISO',
      editable: true,
      droppable: true, // this allows things to be dropped onto the calendar
      /* I am using eventChange and eventReceive to track changes in the calendar */
      locale: 'pl',
      eventChange: function(info){
        if (!modifiedEvents.has(info.event.id)) {
          modifiedEvents.add(info.event.id)
        }
      },
      eventReceive: function(info){
        if (!modifiedEvents.has(info.event.id)) {
          modifiedEvents.add(info.event.id)
        }
      },
      drop: function(arg) {
        // remove the element from the "Draggable Events" list
        arg.draggedEl.parentNode.removeChild(arg.draggedEl);
      },
      events: events_list,
      eventDidMount: function(info) {
      var dotEl = info.el.getElementsByClassName('fc-list-event-graphic')[0];
      if (dotEl) {
        // if event is longer than 16 hours
      if (info.event.allDay || (info.event.end - info.event.start) > 57600000) {
         dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> I, II, III</span>`)
      }
        // starts in I
      else if (6 <= info.event.start.getHours() && info.event.start.getHours() < 14) {
        if (14 <= info.event.end?.getHours() && info.event.end?.getHours() < 22){
        dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> I, II</span>`)
        }
        else if (22 <= info.event.end?.getHours() || info.event.end?.getHours() < 6 ){
          dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> I, II, III</span>`)
        }
        else {
          dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> I</span>`)
        }
        }
        // starts in II
      else if (14 <= info.event.start.getHours() && info.event.start.getHours() < 22) {
        if (6 <= info.event.end?.getHours() && info.event.end?.getHours() < 14){
        dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> II, III, I</span>`)
        }
        else if (22 <= info.event.end?.getHours() || info.event.end?.getHours() < 6 ){
          dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> II, III</span>`)
        }
        else {
          dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> II</span>`)
        }
        }
        // starts in III
      else if (22 <= info.event.start.getHours() || info.event.start.getHours() < 6 ) {
        if (14 <= info.event.end?.getHours() && info.event.end?.getHours() < 22){
        dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> III, II</span>`)
        }
        else if (6 <= info.event.end?.getHours() && info.event.end?.getHours() < 14){
          dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> III, II, I</span>`)
        }
        else {
          dotEl.insertAdjacentHTML('beforeend', `<span class='mr-3'> III</span>`)
        }
        }
      }
    },
      eventClick: function(info) {
        info.jsEvent.preventDefault(); // don't let the browser navigate

        if (info.event.url) {
          window.open(info.event.url);
        }
      }
      
    });
    calendar.render();

    /* FUNCTIONS */
    // id of newly created plans is ('ID' + temporaryId)
    let temporaryId = 1
    function addSubPlan(button){
      let form = button.parentNode.previousSibling   // class='modal-body' title='masterplan mongoId'
      let planName = form.querySelector('.planName').value
      if (planName.length !== 0)
      {
        let planMasterplanId = form.title
        let planDescription = form.querySelector('.planDescription').value
        let planOrderNumber = form.querySelector('.planOrderNumber').value
        let planLine = form.querySelector('.planLine').value
        let planOperation = form.querySelector('.planOperation').value
        let planDevicetype = form.querySelector('.planDevicetype').value
        let planDevice = form.querySelector('.planDevice').value
        let planIsParalyzing = form.querySelector('.planIsParalyzing').checked
        // wypełnia zmiana przy raporcie: 1 - nierozpoczęte, 2 - rozgrzebane 3 - zrobione
        let planStatus = 1

        createdPlans['ID'+temporaryId] = {
          masterplanId: planMasterplanId,
          name: planName, 
          description: planDescription,
          orderNumber: planOrderNumber,
          isParalyzing: planIsParalyzing,
          status: planStatus }

        // If line name is not picked it's value is equal to "dowolne". Don't save such objects.
        if (planLine !== 'defaultvalue')
          createdPlans['ID'+temporaryId].line = planLine
        if (planOperation !== 'defaultvalue')
          createdPlans['ID'+temporaryId].operation = planOperation
        if (planDevicetype !== 'defaultvalue')
          createdPlans['ID'+temporaryId].devicetype = planDevicetype
        if (planDevice !== 'defaultvalue')
          createdPlans['ID'+temporaryId].device = planDevice




        // paste new bar below masterplan header & button
        pasteDiv = `<div class="fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event fc-event-main" 
                    id=ID`+temporaryId+'>'+planName+`</div>`
        whereToPaste = document.querySelector('#ID'+planMasterplanId)
        whereToPaste.insertAdjacentHTML('beforebegin', pasteDiv)
        // make it Draggable
        let myDraggableEl = document.getElementById('ID'+temporaryId)
        new FullCalendar.Draggable(myDraggableEl, {
          eventData:  {
            title: planName,
            id: 'ID'+ temporaryId,
            }
        });
        temporaryId++
      }
      else { alert('Tytuł Pracy Planowanej nie może być pusty.')}
    }


    function saveModifiedPlans(){
      //console.log('modifiedEvents: ',modifiedEvents)
      //console.log('createdPlans', createdPlans)
      for (let planId of modifiedEvents){
        event = calendar.getEventById(planId)
        // check if it is newly created plan or plan from db
        if (planId.slice(0,2) === 'ID'){
          createdPlans[planId].dateStart = event.start
          createdPlans[planId].dateEnd = event.end
          createdPlans[planId].allDay = event.allDay
          saveNewPlan(createdPlans[planId])
        } else {
          //end is mongoDB id
          let modifiedPlan = {id: planId, dateStart: event.start, dateEnd: event.end, allDay: event.allDay}
          updateExistingPlan(modifiedPlan)
        }
      }
      modifiedEvents.clear()
    }


    function saveNewPlan(newPlan){
      fetch('/api/masterplan/calendar/saveNewPlan', {
        method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(newPlan)
      })
      .then(function(res) {
        return res.json()
      })
      .then(function(response) {
        if(response.message) {
          console.log(response.message)
        }
        else{
          console.log(response)
        }
      })
      .catch((err) => {
        console.log(err.message)
      })
    }

    function updateExistingPlan(modifiedPlan){
      fetch('/api/masterplan/calendar/updateExistingPlan', {
        method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(modifiedPlan)
      })
      .then(function(res) {
        return res.json()
      })
      .then(function(response) {
        if(response.message) {
          console.log(response.message)
        }
        else{
          console.log(response)
        }
      })
      .catch((err) => {
        console.log(err.message)
      })
    }
    
    function printList(){
      // click
      document.querySelector('.fc-listWeek-button.fc-button.fc-button-primary').click()
      window.print()
    }
   

    /* LISTENERS */
    let el2 = document.getElementById("testSendButton");
    el2.addEventListener("click", saveModifiedPlans, false);

    let el3 = document.getElementById("printList");
    el3.addEventListener("click", printList, false);
